name: Build whl for all platforms and test

on:
  workflow_dispatch:
  # push:
  #   branches:    
  #     - main

jobs:
  build-pyodide:
    name: Build whl for Pyodide and choreo_GUI
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: 3.13
        conda-remove-defaults: true
        channels: conda-forge
        channel-priority: true
        activate-environment: choreo
        environment-file: environment/environment-dev.yml

    - name: Read Emscripten version number
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV

    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: ${{ env.EMSCRIPTEN_VERSION }}

    - name: Build for Pyodide
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        pyodide build
        python -m build --sdist
        cd choreo-GUI
        python -m build
        cp dist/* ../dist/

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: pyodide-whl
        path: |
          dist/*.whl
          dist/*.tar.gz
        compression-level: 0

  build-multi-os:
    name: Build
    needs: build-pyodide
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
    - name: Install MSVC
      if: matrix.os == 'windows-latest'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Install rtools (mingw-w64)
      if: matrix.os == 'windows-latest'
      run: |
        choco install rtools -y --no-progress --force --version=4.0.0.20220206
        echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Pyodide whl
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: pyodide-whl
        merge-multiple: true

    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true

    - name: Install conda packages
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda create -n build -y
        conda activate build
        conda install python=${{ matrix.python-version }} -c conda-forge
        conda install --file environment/github-actions/environment-build-${{ matrix.os }}.txt -c conda-forge
        pip install build

    - name: Build
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda activate build
        python -m build

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.python-version }}-whl
        path: dist/*64.whl
        compression-level: 0

  gather-all-whl:
    name: Gather all built whls
    needs: [build-pyodide, build-multi-os]
    runs-on: ubuntu-latest
    steps:

      - name: Download Pyodide whl
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '*-whl'
          merge-multiple: true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-whls
          path: dist
          compression-level: 0

  test-multi-os:
    name: Test
    needs: build-pyodide
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
    - name: Install MSVC
      if: matrix.os == 'windows-latest'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Download Pyodide whl
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: pyodide-whl
        merge-multiple: true

    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true

    - name: Install conda packages
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda create -n build -y
        conda activate build
        conda install python=${{ matrix.python-version }} -c conda-forge
        conda install --file environment/github-actions/environment-test-${{ matrix.os }}.txt -c conda-forge
        pip install build

    - name: Install
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda activate build
        cd choreo-GUI
        pip install -e .
        cd ..
        pip install -e .[test-cli]

    - name: Test
      continue-on-error: true
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda activate build
        pytest

    - name: Copy result
      shell: bash -el {0} # Needed whenever the commands need something in conda
      run: |
        conda activate build
        python ./tests/gather_junit.py -tag ${{ matrix.os }}-${{ matrix.python-version }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.python-version }}-junit
        path: pytest_out/*.xml

  gather-all-junit:
    name: Gather all test outputs
    needs: test-multi-os
    runs-on: ubuntu-latest
    steps:

      - name: Download test outputs
        uses: actions/download-artifact@v4
        with:
          path: pytest_out
          pattern: '*-junit'
          merge-multiple: true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-tests
          path: pytest_out

  gather-all-outputs:
    name: Gather all outputs
    needs: [gather-all-whl, gather-all-junit]
    runs-on: ubuntu-latest
    steps:

      - name: Download test outputs
        uses: actions/download-artifact@v4
        with:
          path: artifact
          pattern: 'all-*'
          merge-multiple: true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          path: artifact
